To select the latest version of each distinct `NART_f` value based on the last two digits and update the `Highest_NART` field, we need to approach the problem in a few distinct steps:

1. Extract the base `NART_f` values and their versions.
2. Identify the highest version for each `NART_f`.
3. Update the `Highest_NART` field for those records identified in step 2.

Here’s how you can do it:

### Step 1: Extract Base `NART_f` and Version Number

1. **Create a new query** to extract the base `NART_f` and version number.
2. **Open your Access database**.
3. **Go to the Queries section**.
4. **Create a new query in Design View**.
5. **Add the table `hlftbl_NART_Selection`**.
6. **Switch to SQL View** by clicking on "SQL View" in the "View" dropdown.
7. **Enter the following SQL code**:

    ```sql
    SELECT 
        NART_f,
        Val(Right([NART_f], 2)) AS VersionNumber,
        Left([NART_f], Len([NART_f]) - 3) AS BaseNART
    FROM 
        hlftbl_NART_Selection;
    ```

8. **Save this query** with a name like `Query_Base_Version`.

### Step 2: Identify the Highest Version for Each Base `NART_f`

1. **Create another new query** to find the highest version for each base `NART_f`.
2. **Add the query `Query_Base_Version`**.
3. **Switch to SQL View**.
4. **Enter the following SQL code**:

    ```sql
    SELECT 
        BaseNART, 
        MAX(VersionNumber) AS MaxVersion
    FROM 
        Query_Base_Version
    GROUP BY 
        BaseNART;
    ```

5. **Save this query** with a name like `Query_Max_Version_Per_Base`.

### Step 3: Update the `Highest_NART` Field

1. **Create a new update query**.
2. **Add the table `hlftbl_NART_Selection`**.
3. **Add the queries `Query_Base_Version` and `Query_Max_Version_Per_Base`** to the query design.
4. **Switch to SQL View**.
5. **Enter the following SQL code** to update the `Highest_NART` field:

    ```sql
    UPDATE 
        hlftbl_NART_Selection AS h
    INNER JOIN 
        (Query_Base_Version AS bv 
        INNER JOIN Query_Max_Version_Per_Base AS mv 
        ON (bv.BaseNART = mv.BaseNART) AND (bv.VersionNumber = mv.MaxVersion)) 
    ON h.NART_f = bv.NART_f
    SET h.Highest_NART = True;
    ```

6. **Save this query** with a name like `Update_Highest_NART`.
7. **Run the update query**:
    - Locate the query in the Queries section.
    - Double-click the query to run it. Confirm any prompts to update the records.

### Additional Step: Reset `Highest_NART` for All Other Records

1. **Create another update query** to reset the `Highest_NART` field for records that are not the highest version.
2. **Add the table `hlftbl_NART_Selection`**.
3. **Switch to SQL View**.
4. **Enter the following SQL code**:

    ```sql
    UPDATE 
        hlftbl_NART_Selection
    SET 
        Highest_NART = False
    WHERE 
        Highest_NART IS NULL OR Highest_NART = True AND NART_f NOT IN 
        (SELECT NART_f 
         FROM hlftbl_NART_Selection AS h 
         INNER JOIN (Query_Base_Version AS bv 
         INNER JOIN Query_Max_Version_Per_Base AS mv 
         ON (bv.BaseNART = mv.BaseNART) AND (bv.VersionNumber = mv.MaxVersion)) 
         ON h.NART_f = bv.NART_f);
    ```

5. **Save this query** with a name like `Reset_Highest_NART`.
6. **Run the query** to reset the `Highest_NART` field for non-highest versions.

By following these steps, you should be able to accurately mark the highest `NART_f` versions in the `hlftbl_NART_Selection` table.





VBA:
Sub UpdateHighestNART()
    Dim conn As Object
    Dim sql As String
    
    ' Create a new ADO connection
    Set conn = CreateObject("ADODB.Connection")
    conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & CurrentProject.Path & "\" & CurrentProject.Name
        
  
    ' Create Temp_Base_Version table
    sql = "SELECT NART_f, Val(Right([NART_f], 2)) AS VersionNumber, Left([NART_f], Len([NART_f]) - 3) AS BaseNART INTO Temp_Base_Version FROM hlftbl_NART_Selection;"
    conn.Execute sql
    
    ' Create Temp_Max_Version_Per_Base table
    sql = "SELECT BaseNART, MAX(VersionNumber) AS MaxVersion INTO Temp_Max_Version_Per_Base FROM Temp_Base_Version GROUP BY BaseNART;"
     conn.Execute sql
    
    ' Reset Highest_NART
    sql = "UPDATE hlftbl_NART_Selection SET Highest_NART = False; "
    conn.Execute sql
    
    ' Update Highest_NART field
    sql = "UPDATE hlftbl_NART_Selection AS h " & _
          "INNER JOIN (Temp_Base_Version AS bv " & _
          "INNER JOIN Temp_Max_Version_Per_Base AS mv " & _
          "ON (bv.BaseNART = mv.BaseNART) AND (bv.VersionNumber = mv.MaxVersion)) " & _
          "ON h.NART_f = bv.NART_f " & _
          "SET h.Highest_NART = True;"
    conn.Execute sql
    
    
    
    ' Drop temporary tables
    sql = "DROP TABLE Temp_Base_Version;"
    conn.Execute sql
    sql = "DROP TABLE Temp_Max_Version_Per_Base;"
    conn.Execute sql
    
    ' Close the connection
    conn.Close
    Set conn = Nothing
    
    MsgBox "Updated Highest NART successfully.", vbInformation
End Sub







VBA JB2
Sub UpdateHighestJB2()
    Dim conn As Object
    Dim sql As String
    
    ' Create a new ADO connection
    Set conn = CreateObject("ADODB.Connection")
    conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & CurrentProject.Path & "\" & CurrentProject.Name
    
    ' Create Temp_Base_JB2 table
    sql = "SELECT JB2, Right([JB2], 2) AS VersionNumber, Left([JB2], IIf(InStr([JB2], '.') > 0, InStr([JB2], '.') - 1, Len([JB2]))) AS BaseJB2 " & _
          "INTO Temp_Base_JB2 FROM tbl_DELSPC WHERE JB2 Is Not Null AND JB2 <> '' AND JB2 <> 'N.A.';"
    conn.Execute sql
    
    ' Create Temp_Max_Version_Per_JB2 table
    sql = "SELECT BaseJB2, MAX(VersionNumber) AS MaxVersion INTO Temp_Max_Version_Per_JB2 FROM Temp_Base_JB2 GROUP BY BaseJB2;"
    conn.Execute sql
    
    ' Reset Highest_JB2
    sql = "UPDATE tbl_DELSPC SET Highest_JB2 = False WHERE JB2 Is Not Null AND JB2 <> '' AND JB2 <> 'N.A.';"
    conn.Execute sql
    
    ' Update Highest_JB2 field
    sql = "UPDATE tbl_DELSPC AS h " & _
          "INNER JOIN (Temp_Base_JB2 AS bv " & _
          "INNER JOIN Temp_Max_Version_Per_JB2 AS mv " & _
          "ON (bv.BaseJB2 = mv.BaseJB2) AND (bv.VersionNumber = mv.MaxVersion)) " & _
          "ON h.JB2 = bv.JB2 " & _
          "SET h.Highest_JB2 = True " & _
          "WHERE h.JB2 Is Not Null AND h.JB2 <> '' AND h.JB2 <> 'N.A.';"
    conn.Execute sql
    
    ' Drop temporary tables
    sql = "DROP TABLE Temp_Base_JB2;"
    conn.Execute sql
    sql = "DROP TABLE Temp_Max_Version_Per_JB2;"
    conn.Execute sql
    
    ' Close the connection
    conn.Close
    Set conn = Nothing
    
    MsgBox "Updated Highest JB2 successfully.", vbInformation
End Sub



VBA§:

Option Compare Database

Sub ExecuteSQLFromFile()
    Dim conn As Object
    Dim sqlFilePath As String
    Dim sql As String

    ' Create a new ADO connection
    Set conn = CreateObject("ADODB.Connection")
    conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & CurrentProject.Path & "\" & CurrentProject.Name
    
    ' Begin Transaction
    conn.BeginTrans
    
    ' Create Temp_Base_Version table
    sqlFilePath = "C:\Users\dehmouu\Essity\TEAM-HM-GMI-PMO, Artworks & Packaging - Alexandria 2024\PackagingDB_Test-Version\DB_Mohamad\BackUp_dehtosi_240709_1116.accdb\Query_Base_Version.sql"
    sql = ReadFile(sqlFilePath)
    conn.Execute sql
    
    ' Create Temp_Max_Version_Per_Base table
    sqlFilePath = "C:\Users\dehmouu\Essity\TEAM-HM-GMI-PMO, Artworks & Packaging - Alexandria 2024\PackagingDB_Test-Version\DB_Mohamad\BackUp_dehtosi_240709_1116.accdb\Query_Max_Version_Per_Base.sql"
    sql = ReadFile(sqlFilePath)
    conn.Execute sql
  
    
    ' Reset all Highest_NART to False
    sqlFilePath = "C:\Users\dehmouu\Essity\TEAM-HM-GMI-PMO, Artworks & Packaging - Alexandria 2024\PackagingDB_Test-Version\DB_Mohamad\BackUp_dehtosi_240709_1116.accdb\Reset_Highest_NART.sql"
    sql = ReadFile(sqlFilePath)
    conn.Execute sql
    
    ' Set Highest_NART to True for the latest version
    sqlFilePath = "C:\Users\dehmouu\Essity\TEAM-HM-GMI-PMO, Artworks & Packaging - Alexandria 2024\PackagingDB_Test-Version\DB_Mohamad\BackUp_dehtosi_240709_1116.accdb\Update_Highest_NART.sql"
    sql = ReadFile(sqlFilePath)
    conn.Execute sql
    
      
    ' Drop temporary table Base
    sqlFilePath = "C:\Users\dehmouu\Essity\TEAM-HM-GMI-PMO, Artworks & Packaging - Alexandria 2024\PackagingDB_Test-Version\DB_Mohamad\BackUp_dehtosi_240709_1116.accdb\Drop_Temp_Base_Version.sql"
    sql = ReadFile(sqlFilePath)
    conn.Execute sql
    
    ' Drop temporary table Max
    sqlFilePath = "C:\Users\dehmouu\Essity\TEAM-HM-GMI-PMO, Artworks & Packaging - Alexandria 2024\PackagingDB_Test-Version\DB_Mohamad\BackUp_dehtosi_240709_1116.accdb\Drop_Temp_Max_Version_per_Base.sql"
    sql = ReadFile(sqlFilePath)
    conn.Execute sql
    ' Commit Transaction
    conn.CommitTrans
    
    ' Close the connection
    conn.Close
    Set conn = Nothing
    
    MsgBox "Updated Highest NART successfully.", vbInformation
    Exit Sub

End Sub

Function ReadFile(filePath As String) As String
    Dim fso As Object
    Dim file As Object
    Dim text As String
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set file = fso.OpenTextFile(filePath, 1)
    
    text = file.ReadAll
    file.Close
    
    ReadFile = text
End Function




VBA 4
Sub UpdateHighestJB2()
    ' Declare a variable to hold the database reference
    Dim db As DAO.Database
    
    ' Set the database reference to the current database
    Set db = CurrentDb
    
    ' Execute the saved queries in the desired order
    db.Execute "Query_Create_Temp_Base_JB2"
    db.Execute "Query_Create_Temp_Max_Version_Per_JB2"
    db.Execute "Query_Reset_Highest_JB2"
    db.Execute "Query_Update_Highest_JB2"
    db.Execute "Query_Drop_Temp_Base_JB2"
    db.Execute "Query_Drop_Temp_Max_Version_Per_JB2"
    
    ' Display a message box to confirm completion
    MsgBox "Updated Highest JB2 successfully.", vbInformation
End Sub

Predecessor VBA

Sub UpdatePredecessorNART()
    Dim conn As Object
    Dim sql As String
    
    ' Create a new ADO connection
    Set conn = CreateObject("ADODB.Connection")
    conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & CurrentProject.Path & "\" & CurrentProject.Name
    
    ' Create Temp_Base_NART table to extract base and version numbers
    sql = "SELECT NART_f, Val(Right([NART_f], 2)) AS VersionNumber, " & _
          "Left([NART_f], Len([NART_f]) - 3) AS BaseNART " & _
          "INTO Temp_Base_NART FROM hlftbl_NART_Selection " & _
          "WHERE IsNumeric(Right([NART_f], 2)) AND NART_f Is Not Null AND NART_f <> '';"
    Debug.Print "Executing SQL for Temp_Base_NART: " & sql
    conn.Execute sql
    
    ' Verify the content of Temp_Base_NART
    sql = "SELECT * FROM Temp_Base_NART;"
    Debug.Print "Verifying Temp_Base_NART content: " & sql
    Set rs = conn.Execute(sql)
    Do While Not rs.EOF
        Debug.Print "NART_f: " & rs("NART_f") & ", VersionNumber: " & rs("VersionNumber") & ", BaseNART: " & rs("BaseNART")
        rs.MoveNext
    Loop
    rs.Close
    
    ' Create Temp_Predecessor_NART table to identify predecessor NARTs
    sql = "SELECT t1.NART_f, t2.NART_f AS PredecessorNART INTO Temp_Predecessor_NART " & _
          "FROM Temp_Base_NART AS t1 " & _
          "INNER JOIN Temp_Base_NART AS t2 " & _
          "ON t1.BaseNART = t2.BaseNART AND t1.VersionNumber > t2.VersionNumber;"
    Debug.Print "Executing SQL for Temp_Predecessor_NART: " & sql
    conn.Execute sql
    
    ' Verify the content of Temp_Predecessor_NART
    sql = "SELECT * FROM Temp_Predecessor_NART;"
    Debug.Print "Verifying Temp_Predecessor_NART content: " & sql
    Set rs = conn.Execute(sql)
    Do While Not rs.EOF
        Debug.Print "NART_f: " & rs("NART_f") & ", PredecessorNART: " & rs("PredecessorNART")
        rs.MoveNext
    Loop
    rs.Close
    
    ' Reset Predecessor_NART column
    sql = "UPDATE hlftbl_NART_Selection SET Predecessor_NART = Null;"
    Debug.Print "Executing SQL to reset Predecessor_NART: " & sql
    conn.Execute sql
    
    ' Update Predecessor_NART column with identified predecessor NARTs
    sql = "UPDATE hlftbl_NART_Selection AS h " & _
          "INNER JOIN Temp_Predecessor_NART AS p " & _
          "ON h.NART_f = p.NART_f " & _
          "SET h.Predecessor_NART = p.PredecessorNART;"
    Debug.Print "Executing SQL to update Predecessor_NART: " & sql
    conn.Execute sql
    
    ' Drop temporary tables
    sql = "DROP TABLE Temp_Base_NART;"
    Debug.Print "Dropping Temp_Base_NART: " & sql
    conn.Execute sql
    sql = "DROP TABLE Temp_Predecessor_NART;"
    Debug.Print "Dropping Temp_Predecessor_NART: " & sql
    conn.Execute sql
    
    ' Close the connection
    conn.Close
    Set conn = Nothing
    
    MsgBox "Updated Predecessor NART successfully.", vbInformation
End Sub

